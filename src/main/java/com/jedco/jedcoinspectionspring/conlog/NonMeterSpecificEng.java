//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.06.24 at 09:54:18 AM CAT 
//


package com.jedco.jedcoinspectionspring.conlog;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for NonMeterSpecificEng.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="NonMeterSpecificEng"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="TestAll"/&gt;
 *     &lt;enumeration value="TestBreaker"/&gt;
 *     &lt;enumeration value="TestDisp"/&gt;
 *     &lt;enumeration value="DispPwrLmt"/&gt;
 *     &lt;enumeration value="DispTI"/&gt;
 *     &lt;enumeration value="DispKRN"/&gt;
 *     &lt;enumeration value="DispTamper"/&gt;
 *     &lt;enumeration value="DispInstPwr"/&gt;
 *     &lt;enumeration value="DispConsTot"/&gt;
 *     &lt;enumeration value="DispUnbalance"/&gt;
 *     &lt;enumeration value="DispVer"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 */
@XmlType(name = "NonMeterSpecificEng")
@XmlEnum
public enum NonMeterSpecificEng {

    @XmlEnumValue("TestAll")
    TEST_ALL("TestAll"),
    @XmlEnumValue("TestBreaker")
    TEST_BREAKER("TestBreaker"),
    @XmlEnumValue("TestDisp")
    TEST_DISP("TestDisp"),
    @XmlEnumValue("DispPwrLmt")
    DISP_PWR_LMT("DispPwrLmt"),
    @XmlEnumValue("DispTI")
    DISP_TI("DispTI"),
    @XmlEnumValue("DispKRN")
    DISP_KRN("DispKRN"),
    @XmlEnumValue("DispTamper")
    DISP_TAMPER("DispTamper"),
    @XmlEnumValue("DispInstPwr")
    DISP_INST_PWR("DispInstPwr"),
    @XmlEnumValue("DispConsTot")
    DISP_CONS_TOT("DispConsTot"),
    @XmlEnumValue("DispUnbalance")
    DISP_UNBALANCE("DispUnbalance"),
    @XmlEnumValue("DispVer")
    DISP_VER("DispVer");
    private final String value;

    NonMeterSpecificEng(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static NonMeterSpecificEng fromValue(String v) {
        for (NonMeterSpecificEng c : NonMeterSpecificEng.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
